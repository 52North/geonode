version: '2.2'
services:

    container_name: postgres4${COMPOSE_PROJECT_NAME}
  db:
    image: postgres:9.6

  elasticsearch:
   image: elasticsearch
   container_name: elasticsearch4${COMPOSE_PROJECT_NAME}

  rabbitmq:
     image: rabbitmq
     container_name: rabbitmq4${COMPOSE_PROJECT_NAME}

  django:
    image: geonode/geonode:2.6.x
    container_name: django4${COMPOSE_PROJECT_NAME}
    links:
      - db
      - elasticsearch
      - rabbitmq
    command: django-admin.py runserver 0.0.0.0:8000 --settings=geonode.settings
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./scripts/docker/env/production/django.env

  celery:
    image: geonode/geonode:2.6.x
    container_name: celery4${COMPOSE_PROJECT_NAME}
    links:
      - rabbitmq
      - postgres
      - elasticsearch
    command: celery worker --app=geonode.celery_app:app -B -l INFO
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./scripts/docker/env/production/django.env

  geoserver:
    image: geonode/geoserver:2.10.x
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    links:
      - db
    ports:
      - "8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    volumes_from:
      - data_dir_conf
    env_file:
      - ./scripts/docker/env/production/geoserver.env

  geonode:
    image: geonode/nginx:geoserver
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    links:
      - django
      - geoserver
    ports:
      - "80:80"

  data_dir_conf:
    image: geonode/geoserver_data:2.10.x
    container_name: geoserver_data_dir4${COMPOSE_PROJECT_NAME}
    command: /bin/true
    volumes:
      - /geoserver_data/data

volumes:

  geoserver_data_dir:
