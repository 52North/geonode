diff --git a/geonode/api/resourcebase_api.py b/geonode/api/resourcebase_api.py
index 3a633bbb9..39d40fa26 100644
--- a/geonode/api/resourcebase_api.py
+++ b/geonode/api/resourcebase_api.py
@@ -17,8 +17,9 @@
 # along with this program. If not, see <http://www.gnu.org/licenses/>.
 #
 #########################################################################
-import json
 import re
+import json
+import logging
 
 from django.urls import resolve
 from django.db.models import Q
@@ -71,6 +72,8 @@ from django.utils.translation import gettext as _
 if settings.HAYSTACK_SEARCH:
     from haystack.query import SearchQuerySet  # noqa
 
+logger = logging.getLogger(__name__)
+
 LAYER_SUBTYPES = {
     'vector': 'dataStore',
     'raster': 'coverageStore',
@@ -1012,11 +1015,15 @@ class MapResource(CommonModelApi):
             formatted_obj['layers'] = formatted_layers
 
             # replace thumbnail_url with curated_thumbs
-            if hasattr(obj, 'curatedthumbnail'):
-                if hasattr(obj.curatedthumbnail.img_thumbnail, 'url'):
-                    formatted_obj['thumbnail_url'] = obj.curatedthumbnail.thumbnail_url
-                else:
-                    formatted_obj['thumbnail_url'] = ''
+            try:
+                if hasattr(obj, 'curatedthumbnail'):
+                    if hasattr(obj.curatedthumbnail.img_thumbnail, 'url'):
+                        formatted_obj['thumbnail_url'] = obj.curatedthumbnail.thumbnail_url
+                    else:
+                        formatted_obj['thumbnail_url'] = ''
+            except Exception as e:
+                formatted_obj['thumbnail_url'] = ''
+                logger.exception(e)
 
             formatted_objects.append(formatted_obj)
         return formatted_objects
diff --git a/geonode/base/models.py b/geonode/base/models.py
index a1e380eb1..96dce4bf9 100644
--- a/geonode/base/models.py
+++ b/geonode/base/models.py
@@ -43,6 +43,10 @@ from django.core.files.storage import default_storage as storage
 
 from mptt.models import MPTTModel, TreeForeignKey
 
+from PIL import Image
+from io import BytesIO
+from resizeimage import resizeimage
+
 from imagekit.models import ImageSpecField
 from imagekit.processors import ResizeToFill
 
@@ -1354,8 +1358,6 @@ class ResourceBase(PolymorphicModel, PermissionLevelMixin, ItemBase):
 
         try:
             # Check that the image is valid
-            from PIL import Image
-            from io import BytesIO
             content_data = BytesIO(image)
             im = Image.open(content_data)
             im.verify()  # verify that it is, in fact an image
@@ -1381,8 +1383,6 @@ class ResourceBase(PolymorphicModel, PermissionLevelMixin, ItemBase):
 
                 try:
                     # Optimize the Thumbnail size and resolution
-                    from PIL import Image
-                    from resizeimage import resizeimage
                     _default_thumb_size = getattr(
                         settings, 'THUMBNAIL_GENERATOR_DEFAULT_SIZE', {'width': 240, 'height': 200})
                     im = Image.open(open(storage.path(_upload_path), mode='rb'))
@@ -1428,24 +1428,29 @@ class ResourceBase(PolymorphicModel, PermissionLevelMixin, ItemBase):
                 'Error when generating the thumbnail for resource %s. (%s)' %
                 (self.id, str(e)))
             logger.warn('Check permissions for file %s.' % upload_path)
-            Link.objects.filter(resource=self, name='Thumbnail').delete()
-            _thumbnail_url = staticfiles.static(settings.MISSING_THUMBNAIL)
-            obj, created = Link.objects.get_or_create(
-                resource=self,
-                name='Thumbnail',
-                defaults=dict(
-                    url=_thumbnail_url,
-                    extension='png',
-                    mime='image/png',
-                    link_type='image',
+            try:
+                Link.objects.filter(resource=self, name='Thumbnail').delete()
+                _thumbnail_url = staticfiles.static(settings.MISSING_THUMBNAIL)
+                obj, created = Link.objects.get_or_create(
+                    resource=self,
+                    name='Thumbnail',
+                    defaults=dict(
+                        url=_thumbnail_url,
+                        extension='png',
+                        mime='image/png',
+                        link_type='image',
+                    )
                 )
-            )
-            self.thumbnail_url = _thumbnail_url
-            obj.url = _thumbnail_url
-            obj.save()
-            ResourceBase.objects.filter(id=self.id).update(
-                thumbnail_url=_thumbnail_url
-            )
+                self.thumbnail_url = _thumbnail_url
+                obj.url = _thumbnail_url
+                obj.save()
+                ResourceBase.objects.filter(id=self.id).update(
+                    thumbnail_url=_thumbnail_url
+                )
+            except Exception as e:
+                logger.debug(
+                    'Error when generating the thumbnail for resource %s. (%s)' %
+                    (self.id, str(e)))
 
     def set_missing_info(self):
         """Set default permissions and point of contacts.
@@ -1717,9 +1722,10 @@ class CuratedThumbnail(models.Model):
             _upload_path = os.path.join(os.path.dirname(upload_path), actual_name)
             if not os.path.exists(_upload_path):
                 os.rename(upload_path, _upload_path)
+            return self.img_thumbnail.url
         except Exception as e:
             logger.exception(e)
-        return self.img_thumbnail.url
+        return ''
 
 
 class Configuration(SingletonModel):
